--====================================
-- Exploratory Data Analytics Project
--====================================
-- -----------------------------------
-- extension to data warehouse project
-- -----------------------------------

-- ----------------------------------------------------
-- 1. Database Exploration: Explore objects in data set
-- ----------------------------------------------------

SELECT * FROM INFORMATION_SCHEMA.TABLES
ORDER BY TABLE_SCHEMA

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
ORDER BY TABLE_SCHEMA, TABLE_NAME

-- ----------------------------------------------------
-- 2. Dimension Exploration
-- ----------------------------------------------------
--Explore all countries our customers come from
SELECT DISTINCT country FROM gold.dim_customers

--Explore all categories in our business
SELECT DISTINCT category FROM gold.dim_products
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products
ORDER BY 1,2,3

-- ----------------------------------------------------
-- 3. Data Explorattion
-- ----------------------------------------------------
-- find the first and lat order date and difference between them in month and year
SELECT
MIN(order_date) AS First_Order_Date,
MAX(order_date) AS Last_Order_Date,
DATEDIFF(MONTH, MIN(order_date), MAX(order_date)) order_range_month,
DATEDIFF(YEAR, MIN(order_date), MAX(order_date)) order_range_year
FROM gold.fact_sales

--find youngest and oldest customer
SELECT
MIN(birth_date) oldest_customer,
DATEDIFF(YEAR, MIN(birth_date), GETDATE()) oldest_age,
MAX(birth_date) youngest_customer,
DATEDIFF(YEAR, MAX(birth_date), GETDATE()) youngest_age
FROM gold.dim_customers


SELECT
(first_name+' '+last_name) youngest_customer,
birth_date
--DATEDIFF(YEAR, MAX(birth_date), GETDATE()) AS age
FROM gold.dim_customers
WHERE birth_date = (SELECT MAX(birth_date) FROM gold.dim_customers);


SELECT (first_name+' '+last_name) oldest_customer, birth_date FROM gold.dim_customers
WHERE birth_date = (SELECT MIN(birth_date) FROM gold.dim_customers);
-- ----------------------------------------------------
-- 4. Measures Exploration
-- ----------------------------------------------------
--find the total sales
SELECT SUM(sales_amount) total_sales FROM gold.fact_sales		 --29356250

--find the average selling price
SELECT AVG(price) FROM gold.fact_sales			--486

--find the total number of orders
SELECT COUNT(DISTINCT(order_number)) FROM gold.fact_sales		--27659

--find the total number of products
SELECT COUNT(*) FROM gold.dim_products		--295

--find the total numbers of customers
SELECT COUNT(*) FROM gold.dim_customers			--18484

--find the total nummber of customers that have placed an order
SELECT COUNT(DISTINCT(customer_key)) FROM gold.fact_sales        --18484

--find how many items are sold
SELECT SUM(quantity) FROM gold.fact_sales	--60423

-- TO VIEW ALL THESE QUERIES IN TABLE
SELECT 'Total Sales' measure_name, SUM(sales_amount) meassure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average Price' measure_name,AVG(price) measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders' measure_name,COUNT(DISTINCT(order_number)) measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Products' measure_name,COUNT(*) measure_value FROM gold.dim_products
UNION ALL
SELECT 'Total Customers' measure_name,COUNT(*) measure_value FROM gold.dim_customers
UNION ALL
SELECT 'Total customers who Placed Order' measure_name,COUNT(DISTINCT(customer_key)) measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantities Sold' measure_name, SUM(quantity) measure_value FROM gold.fact_sales
-- ----------------------------------------------------
-- 5. Magnitude
-- ----------------------------------------------------
--Find total customers by counttries
SELECT
country,
COUNT(customer_id) customers
FROM gold.dim_customers
GROUP BY country
ORDER BY COUNT(customer_id)

--Find total customers by gender
SELECT
gender,
COUNT(customer_id) customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY COUNT(customer_id)

--Find total products by category
SELECT
category,
COUNT(product_id) products
FROM gold.dim_products
GROUP BY category
ORDER BY COUNT(product_id)

--What is the average costs in each category
--SELECT * FROM gold.dim_products
SELECT
category,
AVG(cost) avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY AVG(cost)


--What is the total revenue generated for each category
SELECT TOP 2 * FROM gold.dim_products
SELECT TOP 2 * FROM gold.fact_sales

SELECT
p.category, SUM(s.sales_amount) total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p ON s.product_key = p.product_key
GROUP BY p.category
ORDER BY total_revenue


--Find total revenue is generated by each customer
SELECT
(C.first_name+' '+C.last_name) Customer_name,
SUM(s.sales_amount) total_revenue
FROM gold.fact_sales S
LEFT JOIN gold.dim_customers C ON S.customer_key = C.customer_key
GROUP BY (C.first_name+' '+C.last_name)
ORDER BY total_revenue DESC

SELECT
C.customer_key,
C.first_name,
C.last_name,
SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales AS S
LEFT JOIN gold.dim_customers AS C ON S.customer_key = C.customer_key
GROUP BY 
C.customer_key,
C.first_name,
C.last_name
ORDER BY total_revenue DESC
--above both queries look same but gives different results. because there might be two persons with same name but they both have diff key


--What is the distribution of sold items across countries
SELECT
C.country,
SUM(s.quantity) AS total_quantity
FROM gold.fact_sales s
LEFT JOIN gold.dim_customers C ON s.customer_key = C.customer_key
GROUP BY C.country
ORDER BY SUM(s.quantity) DESC


-- ----------------------------------------------------
-- 6. Ranking
-- ----------------------------------------------------
--1.which 5 products generates the highest revenue
SELECT TOP 5
p.product_name, 
SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p ON s.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC

--2.what are the 5 worst performing products in terms of sales
SELECT TOP 5
p.product_name, 
SUM(s.sales_amount) AS total_revenue
FROM gold.fact_sales s
LEFT JOIN gold.dim_products p ON s.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue

--BOTH above logics are right but if the code is more complex and want more flexiblity use RANK() function
SELECT * FROM(
	SELECT
	p.product_name, 
	SUM(s.sales_amount) AS total_revenue,
	ROW_NUMBER() OVER(ORDER BY SUM(s.sales_amount) DESC) AS rank_products
	FROM gold.fact_sales s
	LEFT JOIN gold.dim_products p ON s.product_key = p.product_key
	GROUP BY p.product_name
	)T
WHERE rank_products <= 5

--Find the top 10 customers who have generated the highest revenue 
SELECT * FROM(
SELECT
C.customer_key,
C.first_name,
C.last_name,
SUM(S.sales_amount) AS total_revenue,
ROW_NUMBER() OVER(ORDER BY SUM(S.sales_amount) DESC) customer_rank
FROM gold.fact_sales S
LEFT JOIN gold.dim_customers C ON S.customer_key = C.customer_key
GROUP BY
C.customer_key,
C.first_name,
C.last_name)T
WHERE customer_rank <= 10


--3 customers with the fewest orders placed.
SELECT * FROM(
SELECT
C.customer_key,
C.first_name,
C.last_name,
COUNT(DISTINCT S.order_number) AS total_orders,
ROW_NUMBER() OVER(ORDER BY COUNT(DISTINCT S.order_number)) customer_rank
FROM gold.fact_sales S
LEFT JOIN gold.dim_customers C ON S.customer_key = C.customer_key
GROUP BY
C.customer_key,
C.first_name,
C.last_name)T
WHERE customer_rank <= 3

--OR

SELECT TOP 3
C.customer_key,
C.first_name,
C.last_name,
COUNT(DISTINCT S.order_number) AS total_orders
FROM gold.fact_sales AS S
LEFT JOIN gold.dim_customers AS C ON S.customer_key = C.customer_key
GROUP BY
C.customer_key,
C.first_name,
C.last_name
ORDER BY total_orders